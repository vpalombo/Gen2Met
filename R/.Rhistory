dataset = "athaliana_eg_gene",
host = "plants.ensembl.org", biomart.species)), verbose = FALSE)
mart2 <- biomaRt::useMart(biomart = "plants_mart",
dataset = "athaliana_eg_gene",
host = "plants.ensembl.org")
genelist2 <- biomaRt::getBM(attributes = c("entrezgene_id", "external_gene_name"),
filters = c("external_gene_name"),
values = genelist,
mart=(biomaRt::useMart(mart2, biomart.species)), verbose = FALSE)
mart2 <- biomaRt::useMart(biomart = "plants_mart",
#dataset = "athaliana_eg_gene",
host = "plants.ensembl.org")
mart2 <- biomaRt::useMart(biomart = "plants_mart",
dataset = "athaliana_eg_gene",
host = "plants.ensembl.org")
mart2 <- biomaRt::useMart(biomart = "plants_mart",
dataset = "athaliana_eg_gene",
host = "plants.ensembl.org")
mart2 <- NULL
mart2 <- biomaRt::useMart(biomart = "plants_mart",
#dataset = "athaliana_eg_gene",
host = "plants.ensembl.org")
mart2 <- biomaRt::useMart(biomart = "plants_mart",
dataset = "athaliana_eg_gene",
host = "plants.ensembl.org")
ensembl = biomaRt::useEnsembl(biomart="plants_mart", dataset="vvinifera_eg_gene")
ensembl = biomaRt::useEnsembl(biomart="plants_mart", host = "plants.ensembl.org",dataset="vvinifera_eg_gene")
genelist2 <- biomaRt::getBM(attributes = c("entrezgene_id", "external_gene_name"),
filters = c("external_gene_name"),
values = genelist,
mart=ensembl, verbose = FALSE)
listAttributes(ensembl)
orgs1 <- biomaRt::listDatasets(ensembl)
View(orgs1)
View(orgs2)
View(orgs1)
View(orgs2)
genelist2 <- biomaRt::getBM(attributes = c("entrezgene_id", "external_gene_name"),
filters = c("external_gene_name"),
values = genelist,
mart=ensembl, verbose = FALSE)
genelist2 <- biomaRt::getBM(attributes = c("entrezgene_id", "external_gene_name"),
filters = c("external_gene_name"),
values = genelist,
mart=(biomaRt::useMart(biomart = "plants_mart", host =  "plants.ensembl.org", dataset = biomart.species)), verbose = FALSE)
biomart.species
ensembl = biomaRt::useMart(biomart="plants_mart", host = "plants.ensembl.org",dataset="vvinifera_eg_gene")
ensembl = biomaRt::useMart(biomart="plants_mart", host = "plants.ensembl.org",dataset="aalpina_eg_gene")
ensembl@attributes
a <- ensembl@attributes
View(a)
genelist2 <- biomaRt::getBM(attributes = c("entrezgene_id", "external_gene_name"),
filters = c("external_gene_name"),
values = genelist,
mart=(biomaRt::useMart(biomart = "plants_mart", host =  "plants.ensembl.org", dataset = biomart.species)), verbose = FALSE)
#Script: Gen2Met.dataPreparation.R
#License: GPLv3 or later
#Modification date: 2023-05-13
#Written by: Valentino Palombo
#Contact: valentino.palombo@gmail.com
#Description: Prepare the dataset for Gen2Met core function. This function converts gene ID from ensembl to entrez (or vice versa) and to add the gene symbol.
Gen2Met.dataPreparation <- function(
in.file,
biomart.species=NULL
)
{
#check the arguments genelist, biomartspecies, gene_id
if (file.exists(in.file)){
genelist <- read.table(in.file, header=F, stringsAsFactors = F)
cat("Input file imported! \n")
}else{
cat("Input file not found. Please check! \n")
stop("Exit",call. = F)
}
if (is.null(biomart.species)){
cat("\n")
cat("Biomart species not specified. Please check! \n")
stop("Exit",call. = F)
}else{
orgs1 <- biomaRt::listDatasets(useMart("ensembl"))
orgs2 <- biomaRt::listDatasets(useMart(biomart = "plants_mart",
dataset = "athaliana_eg_gene",
host = "plants.ensembl.org"))
orgs <- rbind(orgs1, orgs2)
if (biomart.species %in% orgs$dataset){
cat("\n")
cat("BiomaRt species correct! \n")
}else{
cat("\n")
cat("BiomaRt species incorrect. Please check! \n")
stop("Exit",call. = F)
}
}
#generate output file name
in.file <- gsub("\\..*", "", in.file)
#convert to gene id in animal organism and export the result
cat("\n")
cat("Convertion from gene symbol to entrez ID ... \n")
genelist2 <- biomaRt::getBM(attributes = c("entrezgene_id", "external_gene_name"),
filters = c("external_gene_name"),
values = genelist,
mart=(biomaRt::useMart("ensembl", biomart.species)), verbose = FALSE)
colnames(genelist) <- c("entrezgene_id", "external_gene_name")
cat("DONE\n")
#cat("\n")
#cat("Checking for corresponding genes in KEGG database ... \n")
cat("n.", paste(sum(length(which(!is.na(genelist2$entrezgene_id))))), "out of", paste(sum(length(which(!is.na(genelist$V1))))), "genes have a corresponding entrez gene ID in BioMart database.", sep= " ")
wd <- getwd()
write.table(x = genelist, file = paste(in.file,"_converted.txt",sep=""), row.names = F)
cat("\n")
cat("Gene list exported!")
return(genelist)
}
#Script: Gen2Met.biomartSpecies.R
#License: GPLv3 or later
#Modification date: 2023-05-13
#Written by: Valentino Palombo
#Contact: valentino.palombo@gmail.com
#Description: Find the organism code among the list of those available on biomaRt.
Gen2Met.biomartSpecies <- function(
string = NULL
)
{
#download the biomaRt ensembl dataset and show all the list of organisms available
mart <- biomaRt::useMart("ensembl")
orgs <- biomaRt::listDatasets(mart)
colnames(orgs) <- c("organism_code", "description", "version")
#check the argument
if (is.null(string)){
cat("The list of all available species for gene id convertion and data preparation was created! \n")
cat("Remember to use the correct organism code for relative Gen2Met functions. \n")
return(orgs)
}else{
#download the biomaRt ensembl dataset and show only the organism(s) matching the string of interest
org <- grep(string, orgs$description, ignore.case = T, value=T)
if (length(org)==0){
cat("No match found for the requested string! \n")
}else{
orgs <- data.frame(orgs[orgs$description %in% org,1:3], row.names = NULL)
colnames(orgs) <- c("organism_code", "description", "version")
cat("The list of available species matched your string was created! \n")
cat("Remember to use the correct organism code for relative Gen2Met functions. \n")
return(orgs)
}
}
}
list <- Gen2Met.biomartSpecies(string = "cow")
View(list)
Gen2Met.dataPreparation <- function(
in.file,
biomart.species=NULL
)
{
#check the arguments genelist, biomartspecies, gene_id
if (file.exists(in.file)){
genelist <- read.table(in.file, header=F, stringsAsFactors = F)
cat("Input file imported! \n")
}else{
cat("Input file not found. Please check! \n")
stop("Exit",call. = F)
}
if (is.null(biomart.species)){
cat("\n")
cat("Biomart species not specified. Please check! \n")
stop("Exit",call. = F)
}else{
orgs1 <- biomaRt::listDatasets(useMart("ensembl"))
orgs2 <- biomaRt::listDatasets(useMart(biomart = "plants_mart",
dataset = "athaliana_eg_gene",
host = "plants.ensembl.org"))
orgs <- rbind(orgs1, orgs2)
if (biomart.species %in% orgs$dataset){
cat("\n")
cat("BiomaRt species correct! \n")
}else{
cat("\n")
cat("BiomaRt species incorrect. Please check! \n")
stop("Exit",call. = F)
}
}
#generate output file name
in.file <- gsub("\\..*", "", in.file)
#convert to gene id in animal organism and export the result
cat("\n")
cat("Convertion from gene symbol to entrez ID ... \n")
genelist2 <- biomaRt::getBM(attributes = c("entrezgene_id", "external_gene_name"),
filters = c("external_gene_name"),
values = genelist,
mart=(biomaRt::useMart("ensembl", biomart.species)), verbose = FALSE)
colnames(genelist) <- c("entrezgene_id", "external_gene_name")
cat("DONE\n")
#cat("\n")
#cat("Checking for corresponding genes in KEGG database ... \n")
cat("n.", paste(sum(length(which(!is.na(genelist2$entrezgene_id))))), "out of", paste(sum(length(which(!is.na(genelist$V1))))), "genes have a corresponding entrez gene ID in BioMart database.", sep= " ")
wd <- getwd()
write.table(x = genelist, file = paste(in.file,"_converted.txt",sep=""), row.names = F)
cat("\n")
cat("Gene list exported!")
return(genelist)
}
genelist.converted <- Gen2Met.dataPreparation (in.file = "data.txt",
biomart.species = biomart.species.bos)
biomart.species.bos <- "btaurus_gene_ensembl"
genelist.converted <- Gen2Met.dataPreparation (in.file = "data.txt",
biomart.species = biomart.species.bos)
genelist <- read.table(in.file, header=F, stringsAsFactors = F)
in.file = "data.txt"
genelist <- read.table(in.file, header=F, stringsAsFactors = F)
cat("Input file imported! \n")
#check the arguments genelist, biomartspecies, gene_id
if (file.exists(in.file)){
genelist <- read.table(in.file, header=F, stringsAsFactors = F)
cat("Input file imported! \n")
}else{
cat("Input file not found. Please check! \n")
stop("Exit",call. = F)
}
if (is.null(biomart.species)){
cat("\n")
cat("Biomart species not specified. Please check! \n")
stop("Exit",call. = F)
}else{
orgs1 <- biomaRt::listDatasets(useMart("ensembl"))
orgs2 <- biomaRt::listDatasets(useMart(biomart = "plants_mart",
dataset = "athaliana_eg_gene",
host = "plants.ensembl.org"))
orgs <- rbind(orgs1, orgs2)
if (biomart.species %in% orgs$dataset){
cat("\n")
cat("BiomaRt species correct! \n")
}else{
cat("\n")
cat("BiomaRt species incorrect. Please check! \n")
stop("Exit",call. = F)
}
}
#Script: Gen2Met.dataPreparation.R
#License: GPLv3 or later
#Modification date: 2023-05-13
#Written by: Valentino Palombo
#Contact: valentino.palombo@gmail.com
#Description: Prepare the dataset for Gen2Met core function. This function converts gene ID from ensembl to entrez (or vice versa) and to add the gene symbol.
Gen2Met.dataPreparation <- function(
in.file,
biomart.species=NULL
)
{
#check the arguments genelist, biomartspecies, gene_id
if (file.exists(in.file)){
genelist <- read.table(in.file, header=F, stringsAsFactors = F)
cat("Input file imported! \n")
}else{
cat("Input file not found. Please check! \n")
stop("Exit",call. = F)
}
if (is.null(biomart.species)){
cat("\n")
cat("Biomart species not specified. Please check! \n")
stop("Exit",call. = F)
}else{
orgs <- biomaRt::listDatasets(useMart("ensembl"))
if (biomart.species %in% orgs$dataset){
cat("\n")
cat("BiomaRt species correct! \n")
}else{
cat("\n")
cat("BiomaRt species incorrect. Please check! \n")
stop("Exit",call. = F)
}
}
#generate output file name
in.file <- gsub("\\..*", "", in.file)
#convert to gene id in animal organism and export the result
cat("\n")
cat("Convertion from gene symbol to entrez ID ... \n")
genelist2 <- biomaRt::getBM(attributes = c("entrezgene_id", "external_gene_name"),
filters = c("external_gene_name"),
values = genelist,
mart=(biomaRt::useMart("ensembl", biomart.species)), verbose = FALSE)
colnames(genelist) <- c("entrezgene_id", "external_gene_name")
cat("DONE\n")
#cat("\n")
#cat("Checking for corresponding genes in KEGG database ... \n")
cat("n.", paste(sum(length(which(!is.na(genelist2$entrezgene_id))))), "out of", paste(sum(length(which(!is.na(genelist$V1))))), "genes have a corresponding entrez gene ID in BioMart database.", sep= " ")
wd <- getwd()
write.table(x = genelist, file = paste(in.file,"_converted.txt",sep=""), row.names = F)
cat("\n")
cat("Gene list exported!")
return(genelist)
}
genelist.converted <- Gen2Met.dataPreparation (in.file = "data.txt",
biomart.species = biomart.species.bos)
genelist2 <- biomaRt::getBM(attributes = c("entrezgene_id", "external_gene_name"),
filters = c("external_gene_name"),
values = genelist,
mart=(biomaRt::useMart("ensembl", biomart.species)), verbose = FALSE)
biomart.species = biomart.species.bos
genelist2 <- biomaRt::getBM(attributes = c("entrezgene_id", "external_gene_name"),
filters = c("external_gene_name"),
values = genelist,
mart=(biomaRt::useMart("ensembl", biomart.species)), verbose = FALSE)
colnames(genelist2) <- c("entrezgene_id", "external_gene_name")
#cat("\n")
#cat("Checking for corresponding genes in KEGG database ... \n")
cat("n.", paste(sum(length(which(!is.na(genelist2$entrezgene_id))))), "out of", paste(sum(length(which(!is.na(genelist$V1))))), "genes have a corresponding entrez gene ID in BioMart database.", sep= " ")
#Script: Gen2Met.dataPreparation.R
#License: GPLv3 or later
#Modification date: 2023-05-13
#Written by: Valentino Palombo
#Contact: valentino.palombo@gmail.com
#Description: Prepare the dataset for Gen2Met core function. This function converts gene ID from ensembl to entrez (or vice versa) and to add the gene symbol.
Gen2Met.dataPreparation <- function(
in.file,
biomart.species=NULL
)
{
#check the arguments genelist, biomartspecies, gene_id
if (file.exists(in.file)){
genelist <- read.table(in.file, header=F, stringsAsFactors = F)
cat("Input file imported! \n")
}else{
cat("Input file not found. Please check! \n")
stop("Exit",call. = F)
}
if (is.null(biomart.species)){
cat("\n")
cat("Biomart species not specified. Please check! \n")
stop("Exit",call. = F)
}else{
orgs <- biomaRt::listDatasets(useMart("ensembl"))
if (biomart.species %in% orgs$dataset){
cat("\n")
cat("BiomaRt species correct! \n")
}else{
cat("\n")
cat("BiomaRt species incorrect. Please check! \n")
stop("Exit",call. = F)
}
}
#generate output file name
in.file <- gsub("\\..*", "", in.file)
#convert to gene id in animal organism and export the result
cat("\n")
cat("Convertion from gene symbol to entrez ID ... \n")
genelist2 <- biomaRt::getBM(attributes = c("entrezgene_id", "external_gene_name"),
filters = c("external_gene_name"),
values = genelist,
mart=(biomaRt::useMart("ensembl", biomart.species)), verbose = FALSE)
colnames(genelist2) <- c("entrezgene_id", "external_gene_name")
cat("DONE\n")
#cat("\n")
#cat("Checking for corresponding genes in KEGG database ... \n")
cat("n.", paste(sum(length(which(!is.na(genelist2$entrezgene_id))))), "out of", paste(sum(length(which(!is.na(genelist$V1))))), "genes have a corresponding entrez gene ID in BioMart database.", sep= " ")
wd <- getwd()
write.table(x = genelist, file = paste(in.file,"_converted.txt",sep=""), row.names = F)
cat("\n")
cat("Gene list exported!")
return(genelist)
}
genelist.converted <- Gen2Met.dataPreparation (in.file = "data.txt",
biomart.species = biomart.species.bos)
#Script: Gen2Met.dataPreparation.R
#License: GPLv3 or later
#Modification date: 2023-05-13
#Written by: Valentino Palombo
#Contact: valentino.palombo@gmail.com
#Description: Prepare the dataset for Gen2Met core function. This function converts gene ID from ensembl to entrez (or vice versa) and to add the gene symbol.
Gen2Met.dataPreparation <- function(
in.file,
biomart.species=NULL
)
{
#check the arguments genelist, biomartspecies, gene_id
if (file.exists(in.file)){
genelist <- read.table(in.file, header=F, stringsAsFactors = F)
cat("Input file imported! \n")
}else{
cat("Input file not found. Please check! \n")
stop("Exit",call. = F)
}
if (is.null(biomart.species)){
cat("\n")
cat("Biomart species not specified. Please check! \n")
stop("Exit",call. = F)
}else{
orgs <- biomaRt::listDatasets(useMart("ensembl"))
if (biomart.species %in% orgs$dataset){
cat("\n")
cat("BiomaRt species correct! \n")
}else{
cat("\n")
cat("BiomaRt species incorrect. Please check! \n")
stop("Exit",call. = F)
}
}
#generate output file name
in.file <- gsub("\\..*", "", in.file)
#convert to gene id in animal organism and export the result
cat("\n")
cat("Convertion from gene symbol to entrez ID ... \n")
genelist2 <- biomaRt::getBM(attributes = c("entrezgene_id", "external_gene_name"),
filters = c("external_gene_name"),
values = genelist,
mart=(biomaRt::useMart("ensembl", biomart.species)), verbose = FALSE)
colnames(genelist2) <- c("entrezgene_id", "external_gene_name")
cat("DONE\n")
#cat("\n")
#cat("Checking for corresponding genes in KEGG database ... \n")
cat("n.", paste(sum(length(which(!is.na(genelist2$entrezgene_id))))), "out of", paste(sum(length(which(!is.na(genelist$V1))))), "genes have a corresponding entrez gene ID in BioMart database.", sep= " ")
wd <- getwd()
write.table(x = genelist2, file = paste(in.file,"_converted.txt",sep=""), row.names = F)
cat("\n")
cat("Gene list exported!")
return(genelist)
}
genelist.converted <- Gen2Met.dataPreparation (in.file = "data.txt",
biomart.species = biomart.species.bos)
length(genelist)
length(genelist$V1)
Gen2Met.biomartSpecies(string = "cow")
head(genelist.converted)
genelist.converted <- Gen2Met.dataPreparation (in.file = "data.txt",
biomart.species = biomart.species.bos)
#Script: Gen2Met.dataPreparation.R
#License: GPLv3 or later
#Modification date: 2023-05-13
#Written by: Valentino Palombo
#Contact: valentino.palombo@gmail.com
#Description: Prepare the dataset for Gen2Met core function. This function converts gene ID from ensembl to entrez (or vice versa) and to add the gene symbol.
Gen2Met.dataPreparation <- function(
in.file,
biomart.species=NULL
)
{
#check the arguments genelist, biomartspecies, gene_id
if (file.exists(in.file)){
genelist <- read.table(in.file, header=F, stringsAsFactors = F)
cat("Input file imported! \n")
}else{
cat("Input file not found. Please check! \n")
stop("Exit",call. = F)
}
if (is.null(biomart.species)){
cat("\n")
cat("Biomart species not specified. Please check! \n")
stop("Exit",call. = F)
}else{
orgs <- biomaRt::listDatasets(useMart("ensembl"))
if (biomart.species %in% orgs$dataset){
cat("\n")
cat("BiomaRt species correct! \n")
}else{
cat("\n")
cat("BiomaRt species incorrect. Please check! \n")
stop("Exit",call. = F)
}
}
#generate output file name
in.file <- gsub("\\..*", "", in.file)
#convert to gene id in animal organism and export the result
cat("\n")
cat("Convertion from gene symbol to entrez ID ... \n")
genelist2 <- biomaRt::getBM(attributes = c("entrezgene_id", "external_gene_name"),
filters = c("external_gene_name"),
values = genelist,
mart=(biomaRt::useMart("ensembl", biomart.species)), verbose = FALSE)
colnames(genelist2) <- c("entrezgene_id", "external_gene_name")
cat("DONE\n")
#cat("\n")
#cat("Checking for corresponding genes in KEGG database ... \n")
cat("n.", paste(sum(length(which(!is.na(genelist2$entrezgene_id))))), "out of", paste(sum(length(which(!is.na(genelist$V1))))), "genes have a corresponding entrez gene ID in BioMart database.", sep= " ")
wd <- getwd()
write.table(x = genelist2, file = paste(in.file,"_converted.txt",sep=""), row.names = F)
cat("\n")
cat("Gene list exported!")
return(genelist2)
}
genelist.converted <- Gen2Met.dataPreparation (in.file = "data.txt",
biomart.species = biomart.species.bos)
head(genelist.converted)
Gen2Met.speciesCode <- function(
string = NULL
)
{
#download the list of KEGG available organisms
orgs <- as.data.frame(KEGGREST::keggList("organism"))[2:3]
#orgs <- as.data.frame(cbind(paste(orgs$organism), paste(orgs$species)))
colnames(orgs) <- c("Gen2Met_code", "species" )
#check for a specific species of interest
if (is.null(string)){
cat("The list of all species available for Gen2Met analysis was created! \n")
cat("Remember to use the correct organism code for relative Gen2Met functions. \n")
return(orgs)
}else{
#look for the specified string
species <- grep(string, orgs$species, ignore.case = T, value=T)
if (length(species) >= 1){
Gen2Met_code <- paste(orgs[orgs$species %in% species,1])
result <- as.data.frame(cbind(species,Gen2Met_code))
cat("The list of available species, matching your string, was created! \n")
cat("Remember to use the correct organism code for relative Gen2Met functions. \n")
return(result)
}else{
cat("No match found for the requested string! \n")
}
}
}
Gen2Met.speciesCode()
list <- Gen2Met.speciesCode()
head(list)
list <- Gen2Met.speciesCode(string = "cow")
head(list)
